#!/usr/bin/env python
import os
from os.path import dirname, abspath, join, basename, isfile, isdir, splitext
import click
from ngs_utils.call_process import run_simple
from ngs_utils.file_utils import which, safe_mkdir, splitext_plus, verify_dir, file_exists, verify_file, adjust_path
from ngs_utils import logger as log
from ngs_utils.snakemake_utils import run_snakemake
from ngs_utils.utils import set_locale; set_locale()
from ngs_utils import conda_utils
from oviraptor import package_path, _version


@click.command()
@click.version_option(_version.__version__)
@click.argument('bam', type=click.Path(exists=True))
@click.option('-o', '--output-dir', 'output_dir', type=click.Path())
@click.option('-v', '--virus', 'viruses',
              help='Optional virus species to check for (e.g. hpv16, hpv33, etc.). '
                   'Can be multiple comma-separated. If not provided, will be detected.')
@click.option('--only-detect', 'only_detect', is_flag=True,
              help='Do not find integration sites: only detect the oncoviral content in the sample. '
                   'Enables usage of the tool in 2 steps: first with `--only-detect`, '
                   'then with `--virus <detected_virus>`')

# Reference: either --viruses-fa and (--host-fa or --combined-reference) explicitly, or --genomes and optional -g
@click.option('--gtf', '--host-gtf', 'gtf_file', help='Path to a GTF file for host genes annotations')
@click.option('-g', '--genome', '--fa', '--host', '--host-fa', 'host_fa', help='Path to host reference (e.g. hg38.fa)')
@click.option('--viruses-fa', 'viruses_fa',
              help='Path to viral sequences bwa index prefix (e.g. gdc-viral.fa from bcbio bundle)')
@click.option('--combined-fa', 'combined_fa',
              help='To speed up the analysis, you can merge the host and viral fasta '
                   'and index with `samtools faidx` and `bwa index`')
@click.option('--genomes', '--genomes-dir', 'input_genomes_url',
              help='Path to the umccrise reference data, alternative to all "*-fa" options. Can be s3 or gds')
@click.option('--aligner', 'aligner', type=click.Choice(['bwa', 'minimap2']),
              help='Aligner to use: bwa or minimap2. BWA is more accurate, '
                   'but minimap2 does not require index and works much faster')

@click.option('-s', '--sample-name' '--prefix', 'sample_name',
              help='Prefix for output files. Default is the basename of the output file.')

@click.option('-t', '--threads', '-j', '--jobs', '--cores', 'requested_cores', type=click.INT,
              help='Maximum number of cores to use at single time (works both for local and cluster runs)')
@click.option('--unlock', 'unlock', is_flag=True)
@click.option('-n', '--dryrun', 'dryrun', is_flag=True,
              help='Propagated to snakemake. Prints rules and commands to be run without actually executing them.')

def main(bam, output_dir, viruses=None, only_detect=False,
         gtf_file=None, host_fa=None, viruses_fa=None, combined_fa=None, input_genomes_url=None,
         aligner=None, sample_name=None, requested_cores=None, unlock=None, dryrun=None):

    if not bam.endswith('.bam'):
        raise click.BadParameter(f'Input must be a BAM file, got: {bam}')
    if not sample_name:
        sample_name = splitext(basename(bam))[0]

    output_dir = output_dir or 'oviraptor_results'
    output_dir = safe_mkdir(abspath(output_dir))
    log_dir = safe_mkdir(join(output_dir, 'log'))
    log.init(log_fpath_=join(log_dir, 'command.txt'), save_previous=True)
    if isfile(join(output_dir, 'work', 'all.done')):
        run_simple('rm ' + join(output_dir, 'work', 'all.done'))

    try:
        cores = len(os.sched_getaffinity(0))
    except:
        cores = 1
    if requested_cores:
        cores = min(requested_cores, cores)
    conf = {
        'input_bam': adjust_path(bam),
        'output_dir': adjust_path(output_dir),
        'sample_name': sample_name,
        'cores': cores,
    }

    if viruses:
        conf['viruses'] = viruses
    if only_detect:
        conf['only_detect'] = only_detect
    if aligner:
        conf['aligner'] = aligner

    genomes_dir = None
    try:
        from reference_data import api as refdata
    except:
        pass
    else:
        # check reference_data can find the genomes dir, and error out if not
        genomes_dir = refdata.find_genomes_dir(input_genomes_url)
        if genomes_dir:
            conf['genomes_dir'] = genomes_dir

    if combined_fa:
        if aligner == 'bwa' and not verify_file(combined_fa + '.bwt'):
            log.critical(f'Please, index {combined_fa} with `bwa index {combined_fa}`, '
                         f'or run with `--aligner minimap2`')
        conf['combined_fa'] = combined_fa
    if viruses_fa:
        if aligner == 'bwa' and not verify_file(viruses_fa + '.bwt'):
            log.critical(f'Please, index {viruses_fa} with `bwa index {viruses_fa}`, '
                         f'or run with `--aligner minimap2`')
        if not verify_file(viruses_fa + '.fai'):
            log.critical(f'Please, index {viruses_fa} with `samtools faidx {viruses_fa}`')
        conf['viruses_fa'] = verify_file(viruses_fa)
    if not genomes_dir:
        if not combined_fa and not host_fa:
            fa_url = 's3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa'
            host_fa = join('oviraptor', 'hg38.fa')
            cmd = f'aws s3 --no-sign-request cp {fa_url} {host_fa}'
            log.warn(
                f'The hg38 fasta file is not provided with --host-fa, '
                f'download it now into the current working directory as {host_fa}? [Y/n]')
            resp = 'n'
            try:
                resp = input()
            except:
                pass
            if resp == 'n':
                log.warn()
                log.warn('You can download the manually with and restart the tool with `--host-fa`, e.g.:')
                log.warn(f'$ {cmd}')
                log.warn(f'$ oviraptor --host-fa {host_fa}')
                exit()
            run_simple(cmd)
        if host_fa:
            conf['host_fa'] = verify_file(host_fa)
    if gtf_file:
        conf['gtf_file'] = gtf_file

    run_snakemake(join(package_path(), "workflow.smk"), conf, cores=cores, output_dir=output_dir,
                  unlock=unlock, dryrun=dryrun)

    prio_tsv = join(output_dir, 'prioritized_oncoviruses.tsv')
    bp_vcf = join(output_dir, 'breakpoints.vcf')
    if only_detect:
        log.info(
            f'Detected prioritized oncoviruses are reported in:\n {prio_tsv}\n '
            f'You can pick significant ones and rerun the tool with '
            f'the `--virus` option and without `--only-detect`'
        )
    elif not verify_file(bp_vcf, silent=True):
        log.warn(
            f'Not found any viruses with a significant coverage. '
            f'You can explore the list at:\n {prio_tsv}\n and rerun with '
            f'the --virus option explicitly.')
    else:
        log.info(f'Breakpoints reported in:\n {bp_vcf}\n'
                 f'Prioritized viruses reported in:\n {prio_tsv}')


if __name__ == '__main__':
    main()






